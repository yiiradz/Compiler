// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /Users/matthewoh/NetBeansProjects/Compiler/src/main/java/scanner/Cminus.flex (2).txt

// JFlex example from the user Manual

//Yayira Dzamesi & Matthew Oh
/** Lexer of the C- programming language. */

// User code (package declarations/imports)

package scanner;

import java.io.IOException;  

// Options & Declarations


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CMinusJFScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\6\0\1\5\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\12\14\1\0\1\15\1\16\1\17\1\20"+
    "\2\0\32\21\6\0\3\21\1\22\1\23\1\24\1\21"+
    "\1\25\1\26\2\21\1\27\1\21\1\30\1\31\2\21"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\21\1\40"+
    "\1\0\1\41\54\0\1\21\12\0\1\21\4\0\1\21"+
    "\5\0\27\21\1\0\37\21\1\0\u01ca\21\4\0\14\21"+
    "\16\0\5\21\7\0\1\21\1\0\1\21\201\0\5\21"+
    "\1\0\2\21\2\0\4\21\1\0\1\21\6\0\1\21"+
    "\1\0\3\21\1\0\1\21\1\0\24\21\1\0\123\21"+
    "\1\0\213\21\10\0\246\21\1\0\46\21\2\0\1\21"+
    "\6\0\51\21\107\0\33\21\4\0\4\21\55\0\53\21"+
    "\25\0\12\14\4\0\2\21\1\0\143\21\1\0\1\21"+
    "\17\0\2\21\7\0\2\21\12\14\3\21\2\0\1\21"+
    "\20\0\1\21\1\0\36\21\35\0\131\21\13\0\1\21"+
    "\16\0\12\14\41\21\11\0\2\21\4\0\1\21\5\0"+
    "\26\21\4\0\1\21\11\0\1\21\3\0\1\21\27\0"+
    "\31\21\7\0\13\21\65\0\25\21\1\0\10\21\106\0"+
    "\66\21\3\0\1\21\22\0\1\21\7\0\12\21\4\0"+
    "\12\14\1\0\20\21\4\0\10\21\2\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\1\21\3\0\4\21\3\0"+
    "\1\21\20\0\1\21\15\0\2\21\1\0\3\21\4\0"+
    "\12\14\2\21\12\0\1\21\10\0\6\21\4\0\2\21"+
    "\2\0\26\21\1\0\7\21\1\0\2\21\1\0\2\21"+
    "\1\0\2\21\37\0\4\21\1\0\1\21\7\0\12\14"+
    "\2\0\3\21\20\0\11\21\1\0\3\21\1\0\26\21"+
    "\1\0\7\21\1\0\2\21\1\0\5\21\3\0\1\21"+
    "\22\0\1\21\17\0\2\21\4\0\12\14\11\0\1\21"+
    "\13\0\10\21\2\0\2\21\2\0\26\21\1\0\7\21"+
    "\1\0\2\21\1\0\5\21\3\0\1\21\36\0\2\21"+
    "\1\0\3\21\4\0\12\14\1\0\1\21\21\0\1\21"+
    "\1\0\6\21\3\0\3\21\1\0\4\21\3\0\2\21"+
    "\1\0\1\21\1\0\2\21\3\0\2\21\3\0\3\21"+
    "\3\0\14\21\26\0\1\21\25\0\12\14\25\0\10\21"+
    "\1\0\3\21\1\0\27\21\1\0\20\21\3\0\1\21"+
    "\32\0\3\21\5\0\2\21\4\0\12\14\20\0\1\21"+
    "\4\0\10\21\1\0\3\21\1\0\27\21\1\0\12\21"+
    "\1\0\5\21\3\0\1\21\40\0\1\21\1\0\2\21"+
    "\4\0\12\14\1\0\2\21\22\0\10\21\1\0\3\21"+
    "\1\0\51\21\2\0\1\21\20\0\1\21\5\0\3\21"+
    "\10\0\3\21\4\0\12\14\12\0\6\21\5\0\22\21"+
    "\3\0\30\21\1\0\11\21\1\0\1\21\2\0\7\21"+
    "\37\0\12\14\21\0\60\21\1\0\2\21\14\0\7\21"+
    "\11\0\12\14\47\0\2\21\1\0\1\21\1\0\5\21"+
    "\1\0\30\21\1\0\1\21\1\0\12\21\1\0\2\21"+
    "\11\0\1\21\2\0\5\21\1\0\1\21\11\0\12\14"+
    "\2\0\4\21\40\0\1\21\37\0\12\14\26\0\10\21"+
    "\1\0\44\21\33\0\5\21\163\0\53\21\24\0\1\21"+
    "\12\14\6\0\6\21\4\0\4\21\3\0\1\21\3\0"+
    "\2\21\7\0\3\21\4\0\15\21\14\0\1\21\1\0"+
    "\12\14\6\0\46\21\1\0\1\21\5\0\1\21\2\0"+
    "\53\21\1\0\115\21\1\0\4\21\2\0\7\21\1\0"+
    "\1\21\1\0\4\21\2\0\51\21\1\0\4\21\2\0"+
    "\41\21\1\0\4\21\2\0\7\21\1\0\1\21\1\0"+
    "\4\21\2\0\17\21\1\0\71\21\1\0\4\21\2\0"+
    "\103\21\45\0\20\21\20\0\126\21\2\0\6\21\3\0"+
    "\u016c\21\2\0\21\21\1\0\32\21\5\0\113\21\6\0"+
    "\10\21\7\0\15\21\1\0\4\21\16\0\22\21\16\0"+
    "\22\21\16\0\15\21\1\0\3\21\17\0\64\21\43\0"+
    "\1\21\4\0\1\21\3\0\12\14\46\0\12\14\6\0"+
    "\131\21\7\0\5\21\2\0\42\21\1\0\1\21\5\0"+
    "\106\21\12\0\37\21\47\0\12\14\36\21\2\0\5\21"+
    "\13\0\54\21\4\0\32\21\6\0\12\14\46\0\27\21"+
    "\11\0\65\21\53\0\12\14\6\0\12\14\15\0\1\21"+
    "\135\0\57\21\21\0\7\21\4\0\12\14\51\0\36\21"+
    "\15\0\2\21\12\14\54\21\32\0\44\21\34\0\12\14"+
    "\3\0\3\21\12\14\44\21\2\0\11\21\7\0\53\21"+
    "\2\0\3\21\51\0\4\21\1\0\6\21\1\0\2\21"+
    "\3\0\1\21\5\0\300\21\100\0\26\21\2\0\6\21"+
    "\2\0\46\21\2\0\6\21\2\0\10\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\37\21\2\0\65\21"+
    "\1\0\7\21\1\0\1\21\3\0\3\21\1\0\7\21"+
    "\3\0\4\21\2\0\6\21\4\0\15\21\5\0\3\21"+
    "\1\0\7\21\164\0\1\21\15\0\1\21\20\0\15\21"+
    "\145\0\1\21\4\0\1\21\2\0\12\21\1\0\1\21"+
    "\3\0\5\21\6\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\4\21\1\0\13\21\2\0\4\21\5\0\5\21"+
    "\4\0\1\21\64\0\2\21\u017b\0\57\21\1\0\57\21"+
    "\1\0\205\21\6\0\4\21\3\0\2\21\14\0\46\21"+
    "\1\0\1\21\5\0\1\21\2\0\70\21\7\0\1\21"+
    "\20\0\27\21\11\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\120\0\1\21\325\0\2\21\52\0\5\21"+
    "\5\0\2\21\4\0\126\21\6\0\3\21\1\0\132\21"+
    "\1\0\4\21\5\0\53\21\1\0\136\21\21\0\33\21"+
    "\65\0\306\21\112\0\360\21\20\0\215\21\103\0\56\21"+
    "\2\0\15\21\3\0\20\21\12\14\2\21\24\0\57\21"+
    "\20\0\37\21\2\0\106\21\61\0\11\21\2\0\147\21"+
    "\2\0\65\21\2\0\5\21\60\0\13\21\1\0\3\21"+
    "\1\0\4\21\1\0\27\21\35\0\64\21\16\0\62\21"+
    "\34\0\12\14\30\0\6\21\3\0\1\21\1\0\2\21"+
    "\1\0\12\14\34\21\12\0\27\21\31\0\35\21\7\0"+
    "\57\21\34\0\1\21\12\14\6\0\5\21\1\0\12\21"+
    "\12\14\5\21\1\0\51\21\27\0\3\21\1\0\10\21"+
    "\4\0\12\14\6\0\27\21\3\0\1\21\3\0\62\21"+
    "\1\0\1\21\3\0\2\21\2\0\5\21\2\0\1\21"+
    "\1\0\1\21\30\0\3\21\2\0\13\21\7\0\3\21"+
    "\14\0\6\21\2\0\6\21\2\0\6\21\11\0\7\21"+
    "\1\0\7\21\1\0\53\21\1\0\14\21\10\0\163\21"+
    "\15\0\12\14\6\0\244\21\14\0\27\21\4\0\61\21"+
    "\4\0\156\21\2\0\152\21\46\0\7\21\14\0\5\21"+
    "\5\0\1\21\1\0\12\21\1\0\15\21\1\0\5\21"+
    "\1\0\1\21\1\0\2\21\1\0\2\21\1\0\154\21"+
    "\41\0\153\21\22\0\100\21\2\0\66\21\50\0\14\21"+
    "\164\0\5\21\1\0\207\21\23\0\12\14\7\0\32\21"+
    "\6\0\32\21\13\0\131\21\3\0\6\21\2\0\6\21"+
    "\2\0\6\21\2\0\3\21\43\0\14\21\1\0\32\21"+
    "\1\0\23\21\1\0\2\21\1\0\17\21\2\0\16\21"+
    "\42\0\173\21\205\0\35\21\3\0\61\21\57\0\40\21"+
    "\15\0\24\21\1\0\10\21\6\0\46\21\12\0\36\21"+
    "\2\0\44\21\4\0\10\21\60\0\236\21\2\0\12\14"+
    "\6\0\44\21\4\0\44\21\4\0\50\21\10\0\64\21"+
    "\234\0\67\21\11\0\26\21\12\0\10\21\230\0\6\21"+
    "\2\0\1\21\1\0\54\21\1\0\2\21\3\0\1\21"+
    "\2\0\27\21\12\0\27\21\11\0\37\21\101\0\23\21"+
    "\1\0\2\21\12\0\26\21\12\0\32\21\106\0\70\21"+
    "\6\0\2\21\100\0\1\21\17\0\4\21\1\0\3\21"+
    "\1\0\35\21\52\0\35\21\3\0\35\21\43\0\10\21"+
    "\1\0\34\21\33\0\66\21\12\0\26\21\12\0\23\21"+
    "\15\0\22\21\156\0\111\21\67\0\63\21\15\0\63\21"+
    "\15\0\44\21\14\0\12\14\306\0\35\21\12\0\1\21"+
    "\10\0\26\21\232\0\27\21\14\0\65\21\56\0\12\14"+
    "\23\0\55\21\40\0\31\21\7\0\12\14\11\0\44\21"+
    "\17\0\12\14\4\0\1\21\13\0\43\21\3\0\1\21"+
    "\14\0\60\21\16\0\4\21\13\0\12\14\1\21\1\0"+
    "\1\21\43\0\22\21\1\0\31\21\124\0\7\21\1\0"+
    "\1\21\1\0\4\21\1\0\17\21\1\0\12\21\7\0"+
    "\57\21\21\0\12\14\13\0\10\21\2\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\5\21\3\0"+
    "\1\21\22\0\1\21\14\0\5\21\236\0\65\21\22\0"+
    "\4\21\5\0\12\14\5\0\1\21\40\0\60\21\24\0"+
    "\2\21\1\0\1\21\10\0\12\14\246\0\57\21\51\0"+
    "\4\21\44\0\60\21\24\0\1\21\13\0\12\14\46\0"+
    "\53\21\15\0\1\21\7\0\12\14\66\0\33\21\25\0"+
    "\12\14\306\0\54\21\164\0\100\21\12\14\25\0\1\21"+
    "\240\0\10\21\2\0\47\21\20\0\1\21\1\0\1\21"+
    "\34\0\1\21\12\0\50\21\7\0\1\21\25\0\1\21"+
    "\13\0\56\21\23\0\1\21\42\0\71\21\7\0\11\21"+
    "\1\0\45\21\21\0\1\21\17\0\12\14\30\0\36\21"+
    "\160\0\7\21\1\0\2\21\1\0\46\21\25\0\1\21"+
    "\11\0\12\14\6\0\6\21\1\0\2\21\1\0\40\21"+
    "\16\0\1\21\7\0\12\14\u0136\0\23\21\15\0\232\21"+
    "\346\0\304\21\274\0\57\21\321\0\107\21\271\0\71\21"+
    "\7\0\37\21\1\0\12\14\146\0\36\21\22\0\60\21"+
    "\20\0\4\21\14\0\12\14\11\0\25\21\5\0\23\21"+
    "\260\0\100\21\200\0\113\21\5\0\1\21\102\0\15\21"+
    "\100\0\2\21\1\0\1\21\34\0\370\21\10\0\363\21"+
    "\15\0\37\21\61\0\3\21\21\0\4\21\10\0\u018c\21"+
    "\4\0\153\21\5\0\15\21\3\0\11\21\7\0\12\21"+
    "\146\0\125\21\1\0\107\21\1\0\2\21\2\0\1\21"+
    "\2\0\2\21\2\0\4\21\1\0\14\21\1\0\1\21"+
    "\1\0\7\21\1\0\101\21\1\0\4\21\2\0\10\21"+
    "\1\0\7\21\1\0\34\21\1\0\4\21\1\0\5\21"+
    "\1\0\1\21\3\0\7\21\1\0\u0154\21\2\0\31\21"+
    "\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\10\21\2\0\62\14\55\21\12\0"+
    "\7\21\2\0\12\14\4\0\1\21\u0171\0\54\21\4\0"+
    "\12\14\6\0\305\21\73\0\104\21\7\0\1\21\4\0"+
    "\12\14\246\0\4\21\1\0\33\21\1\0\2\21\1\0"+
    "\1\21\2\0\1\21\1\0\12\21\1\0\4\21\1\0"+
    "\1\21\1\0\1\21\6\0\1\21\4\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\3\21\1\0\2\21\1\0"+
    "\1\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\2\21\1\0\1\21\2\0"+
    "\4\21\1\0\7\21\1\0\4\21\1\0\4\21\1\0"+
    "\1\21\1\0\12\21\1\0\21\21\5\0\3\21\1\0"+
    "\5\21\1\0\21\21\104\0\327\21\51\0\65\21\13\0"+
    "\336\21\2\0\u0182\21\16\0\u0131\21\37\0\36\21\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\6\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\0"+
    "\1\26\1\27\1\30\1\31\1\26\1\16\1\32\4\16"+
    "\2\0\1\16\1\11\3\16\1\0\1\33\1\16\1\34"+
    "\2\16\1\35\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\42\0\42\0\42\0\210"+
    "\0\252\0\42\0\314\0\356\0\42\0\u0110\0\u0132\0\u0154"+
    "\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe\0\u0220\0\42\0\42"+
    "\0\42\0\42\0\42\0\42\0\42\0\u0242\0\u0264\0\42"+
    "\0\42\0\42\0\u0286\0\u02a8\0\u0176\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\u0176\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0176\0\u0440\0\u0176\0\u0462\0\u0484\0\u0176\0\u0176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\21\1\22\2\21\1\23\3\21\1\24\3\21\1\25"+
    "\1\26\1\27\1\30\44\0\1\2\56\0\1\31\32\0"+
    "\1\32\6\0\1\33\33\0\1\34\5\0\1\35\31\0"+
    "\1\36\46\0\1\14\4\0\17\37\21\0\1\40\41\0"+
    "\1\41\41\0\1\42\36\0\1\43\4\0\17\21\16\0"+
    "\1\43\4\0\6\21\1\44\10\21\16\0\1\43\4\0"+
    "\3\21\1\45\3\21\1\46\7\21\16\0\1\43\4\0"+
    "\2\21\1\47\14\21\16\0\1\43\4\0\10\21\1\50"+
    "\6\21\16\0\1\43\4\0\4\21\1\51\12\21\2\0"+
    "\7\52\1\53\32\52\21\0\17\37\16\0\1\43\41\0"+
    "\1\43\4\0\12\21\1\54\4\21\16\0\1\43\4\0"+
    "\13\21\1\55\3\21\16\0\1\43\4\0\13\21\1\56"+
    "\3\21\16\0\1\43\4\0\5\21\1\57\11\21\16\0"+
    "\1\43\4\0\5\21\1\60\11\21\2\0\7\52\1\61"+
    "\32\52\7\0\1\53\3\0\1\2\42\0\1\43\4\0"+
    "\2\21\1\62\14\21\16\0\1\43\4\0\14\21\1\63"+
    "\2\21\16\0\1\43\4\0\1\21\1\64\15\21\16\0"+
    "\1\43\4\0\6\21\1\65\10\21\2\0\7\52\1\61"+
    "\3\52\1\2\26\52\14\0\1\43\4\0\11\21\1\66"+
    "\5\21\16\0\1\43\4\0\2\21\1\67\14\21\16\0"+
    "\1\43\4\0\7\21\1\70\7\21\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\0\3\11\2\1\1\11\2\1"+
    "\1\11\11\1\7\11\1\0\1\1\3\11\7\1\2\0"+
    "\5\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    Token nextToken;



    Token getNextToken() throws IOException  {

        Token returnToken = nextToken;
        if (nextToken.getTokenType() != Token.TokenType.EOF_TOKEN) {
            nextToken = yylex();
        }
        return returnToken;
    }

    Token viewNextToken() {
        return nextToken;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CMinusJFScanner(java.io.Reader in) throws      IOException
 {
  
     this.zzReader = in;
     nextToken = yylex();

    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token(Token.TokenType.EOF_TOKEN, yytext());
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 31: break;
          case 2:
            { return new Token(Token.TokenType.PARANOPEN_TOKEN, yytext());
            }
            // fall through
          case 32: break;
          case 3:
            { return new Token(Token.TokenType.PARANCLOSE_TOKEN, yytext());
            }
            // fall through
          case 33: break;
          case 4:
            { return new Token(Token.TokenType.MULTIPLY_TOKEN, yytext());
            }
            // fall through
          case 34: break;
          case 5:
            { return new Token(Token.TokenType.PLUS_TOKEN, yytext());
            }
            // fall through
          case 35: break;
          case 6:
            { return new Token(Token.TokenType.MINUS_TOKEN, yytext());
            }
            // fall through
          case 36: break;
          case 7:
            { return new Token(Token.TokenType.PERIOD_TOKEN, yytext());
            }
            // fall through
          case 37: break;
          case 8:
            { return new Token(Token.TokenType.DIVIDE_TOKEN, yytext());
            }
            // fall through
          case 38: break;
          case 9:
            { return new Token(Token.TokenType.INT_TOKEN, yytext());
            }
            // fall through
          case 39: break;
          case 10:
            { return new Token(Token.TokenType.SEMICOLON_TOKEN, yytext());
            }
            // fall through
          case 40: break;
          case 11:
            { return new Token(Token.TokenType.LESSTHAN_TOKEN, yytext());
            }
            // fall through
          case 41: break;
          case 12:
            { return new Token(Token.TokenType.EQUAL_TOKEN, yytext());
            }
            // fall through
          case 42: break;
          case 13:
            { return new Token(Token.TokenType.GREATERTHAN_TOKEN, yytext());
            }
            // fall through
          case 43: break;
          case 14:
            { return new Token(Token.TokenType.ID_TOKEN, yytext());
            }
            // fall through
          case 44: break;
          case 15:
            { return new Token(Token.TokenType.BRACEOPEN_TOKEN, yytext());
            }
            // fall through
          case 45: break;
          case 16:
            { return new Token(Token.TokenType.BRACECLOSE_TOKEN, yytext());
            }
            // fall through
          case 46: break;
          case 17:
            { return new Token(Token.TokenType.NOTEQUAL_TOKEN, yytext());
            }
            // fall through
          case 47: break;
          case 18:
            { return new Token(Token.TokenType.PLUSPLUS_TOKEN, yytext());
            }
            // fall through
          case 48: break;
          case 19:
            { return new Token(Token.TokenType.PLUSEQUAL_TOKEN, yytext());
            }
            // fall through
          case 49: break;
          case 20:
            { return new Token(Token.TokenType.MINUSMINUS_TOKEN, yytext());
            }
            // fall through
          case 50: break;
          case 21:
            { return new Token(Token.TokenType.MINUSEQUAL_TOKEN, yytext());
            }
            // fall through
          case 51: break;
          case 22:
            { return new Token(Token.TokenType.ERROR_TOKEN, yytext());
            }
            // fall through
          case 52: break;
          case 23:
            { return new Token(Token.TokenType.LESSTHANEQUAL_TOKEN, yytext());
            }
            // fall through
          case 53: break;
          case 24:
            { return new Token(Token.TokenType.EQUALEQUAL_TOKEN, yytext());
            }
            // fall through
          case 54: break;
          case 25:
            { return new Token(Token.TokenType.GREATERTHANEQUAL_TOKEN, yytext());
            }
            // fall through
          case 55: break;
          case 26:
            { return new Token(Token.TokenType.IF_TOKEN, yytext());
            }
            // fall through
          case 56: break;
          case 27:
            { return new Token(Token.TokenType.ELSE_TOKEN, yytext());
            }
            // fall through
          case 57: break;
          case 28:
            { return new Token(Token.TokenType.VOID_TOKEN, yytext());
            }
            // fall through
          case 58: break;
          case 29:
            { return new Token(Token.TokenType.WHILE_TOKEN, yytext());
            }
            // fall through
          case 59: break;
          case 30:
            { return new Token(Token.TokenType.RETURN_TOKEN, yytext());
            }
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
